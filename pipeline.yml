# Main script execution
$collectionurl = "https://frb..."
$organization = "YourOrganization"
$project = "YourProject"
$repoId = "YourRepoId"
$token = "YourPAT"
$instance = "https://frsdev.servicenowservices.com"
$username = "YourServiceNowUsername"
$password = "YourServiceNowPassword"

# Function to retrieve the latest commit and associated work items
function Get-CommitAndWorkItemDetails {
    Param(
        [string]$collectionurl,
        [string]$organization,
        [string]$project,
        [string]$repoId,
        [string]$token
    )

    # Base64-encode the PAT for authorization
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$token"))

    # Construct the API URL to get commit details and associated work items
    $baseUrl = "$collectionurl/$organization/$project/_apis/git/repositories/$repoId/commits?searchCriteria.includeWorkItems=true&api-version=7.0-preview.1"

    # Make the API call using the encoded PAT for authorization
    $response = (Invoke-RestMethod -Uri $baseUrl -Method Get -Headers @{Authorization=("Basic $base64AuthInfo")}).value

    # Retrieve the latest commit with associated work items
    $commitWithWorkItems = $response | Where-Object { $_.workItems.Count -gt 0 } | Select-Object -First 1

    if ($commitWithWorkItems) {
        $commitDetails = @{
            "CommitID" = $commitWithWorkItems.commitId
            "Author" = $commitWithWorkItems.author.name
            "Date" = $commitWithWorkItems.author.date
            "Comment" = $commitWithWorkItems.comment
            "WorkItems" = @()
        }

        # Retrieve details of associated work items
        foreach ($workItem in $commitWithWorkItems.workItems) {
            $workItemUrl = $workItem.url + "?api-version=7.0"
            $workItemDetails = Invoke-RestMethod -Uri $workItemUrl -Method Get -Headers @{Authorization=("Basic $base64AuthInfo")}

            $commitDetails.WorkItems += @{
                "WitID" = $workItemDetails.fields.'System.Id'
                "rev" = $workItemDetails.rev
                "Title" = $workItemDetails.fields.'System.Title'
                "AssignedTo" = $workItemDetails.fields.'System.AssignedTo.uniqueName'
                "ChangedDate" = $workItemDetails.fields.'System.ChangedDate'
                "ChangedBy" = $workItemDetails.fields.'System.ChangedBy.uniqueName'
                "WorkItemType" = $workItemDetails.fields.'System.WorkItemType'
                "Priority" = $workItemDetails.fields.'Microsoft.VSTS.Common.Priority'
                "Description" = ($workItemDetails.fields.'System.Description' -replace '<.*?>','')
                "IterationPath" = $workItemDetails.fields.'System.IterationPath'
                "Discussion" = $workItemDetails.fields.'System.History'
            }
        }

        return $commitDetails
    } else {
        Write-Host "No commits found with associated work items."
        return $null
    }
}

# Function to create a ServiceNow ticket
function Create-ServiceNowTicket {
    Param(
        [string]$instance,
        [string]$username,
        [string]$password,
        [hashtable]$commitDetails
    )

    $change_endpoint = "/api/now/table/change_request"
    $final_endpoint = "$instance$change_endpoint"

    # Convert credentials to a secure string for Basic Auth
    $pair = "{0}:{1}" -f $username, $password
    $encodedCreds = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($pair))

    # Headers
    $headers = @{
        'Content-Type' = 'application/json'
        'Accept' = 'application/json'
        'Authorization' = "Basic $encodedCreds"
    }

    # Dynamic Payload based on commit details
    $payload = @{
        cmdb_ci = "ATL - ATLANTAFED - DEV"
        u_business_justification = "Enhancement"
        requested_by = $commitDetails.Author
        type = "Standard"
        priority = $commitDetails.WorkItems[0].Priority
        impact = "2"
        state = "New"
        assignment_group = "FIG-SN-DBA-Support"
        category = "Software"
        subcategory = "Internal Application"
        short_description = "Commit: $($commitDetails.CommitID) - $($commitDetails.Comment)"
        description = $commitDetails.WorkItems[0].Description
        justification = "Increase Productivity and meets DevOps Goals"
        implementation_plan = "Configure Azure DEVOPS Pipeline"
        risk_and_impact_analysis = "See commit details and work item description."
        backout_plan = "Remove Pipeline"
        test_plan = "Execute Pipeline and verify connectivity"
        communication_plan = "Notify DevSecOps Agile Team"
    } | ConvertTo-Json

    try {
        # Invoke the API and get the response
        $response = Invoke-RestMethod -Uri $final_endpoint -Method Post -Headers $headers -Body $payload
        
        # Check if the response contains expected fields
        if ($response -and $response.result) {
            Write-Host "Ticket created successfully."
            Write-Host "Ticket Number: $($response.result.number)"
            Write-Host "Sys ID: $($response.result.sys_id)"
        }
        else {
            Write-Host "Error: The response did not contain expected data."
        }
    }
    catch {
        Write-Host "An error occurred while trying to create the ServiceNow ticket."
        if ($_.Exception.Response -ne $null) {
            $streamReader = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream())
            $errorResponse = $streamReader.ReadToEnd() | ConvertFrom-Json
            Write-Host "Error Details: $($errorResponse | ConvertTo-Json -Depth 5)"
            Write-Host "Status Code: $($_.Exception.Response.StatusCode.value__)"
        }
    }
}


$commitDetails = Get-CommitAndWorkItemDetails -collectionurl $collectionurl -organization $organization -project $project -repoId $repoId -token $token

if ($commitDetails) {
    Create-ServiceNowTicket -instance $instance -username $username -password $password -commitDetails $commitDetails
}
