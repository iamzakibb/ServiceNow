trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: cmdb_ci
  displayName: "Configuration Item"
  type: string
  default: "ATL - ATLANTAFED - DEV"

- name: requested_by
  displayName: "requested by"
  type: string
  default: "Malinda"

- name: u_business_justification
  displayName: "Business Justification"
  type: string
  default: "Enhancement"

- name: type
  displayName: "Change Type"
  type: string
  default: "Standard"

- name: impact
  displayName: "Impact"
  type: string
  default: "2"

- name: state
  displayName: "State"
  type: string
  default: "New"

- name: assignment_group
  displayName: "Assignment Group"
  type: string
  default: "FIG-SN-DBA-Support"

- name: category
  displayName: "Category"
  type: string
  default: "Software"

- name: subcategory
  displayName: "Subcategory"
  type: string
  default: "Internal Application"

- name: justification_reason
  displayName: "Why is the change required?"
  type: string
  default: "Bug fix"

- name: justification_requester
  displayName: "Who requested the change?"
  type: string
  default: "John Doe"

- name: justification_project
  displayName: "What is the HPO and corporate strategic project?"
  type: string
  default: "N/A"

- name: justification_contact
  displayName: "Primary communication contact from business unit?"
  type: string
  default: "Business Unit Contact"

- name: implementation_plan
  displayName: "Implementation Plan"
  type: string
  default: "Configure Azure DEVOPS Pipeline"

- name: risk_and_impact_analysis
  displayName: "Risk and Impact Analysis"
  type: string
  default: "See commit details and work item description."

- name: backout_plan
  displayName: "Backout Plan"
  type: string
  default: "Remove Pipeline"

- name: test_plan
  displayName: "Test Plan"
  type: string
  default: "Execute Pipeline and verify connectivity"

- name: communication_plan
  displayName: "Communication Plan"
  type: string
  default: "Notify DevSecOps Agile Team"

- name: desc_summary
  displayName: "Summary: What is being done?"
  type: string
  default: "Setup DEVOPS Pipeline"

- name: desc_restriction_window
  displayName: "Is this Change being requested during the FOMC Restriction window?"
  type: string
  default: "N"

- name: desc_research_impact
  displayName: "Will it impact Research?"
  type: string
  default: "N"

- name: desc_environment
  displayName: "Environment"
  type: string
  default: "Production"

- name: desc_servers
  displayName: "Server(s) affected"
  type: string
  default: "mac-p-prod-asdb-mcss.database.windows.net"

- name: desc_application
  displayName: "Application"
  type: string
  default: "MCSS"

- name: desc_impacted_areas
  displayName: "Area(s) Impacted"
  type: string
  default: "Contingency Information Anywhere"

- name: desc_testing
  displayName: "Testing: what kind of test?"
  type: string
  default: "Tested in QA"

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Gather description fields into an array
      $descriptionArray = @(
        "Summary: ${{ parameters.desc_summary }}",
        "FOMC Restriction Window: ${{ parameters.desc_restriction_window }}",
        "Research Impact: ${{ parameters.desc_research_impact }}",
        "Environment: ${{ parameters.desc_environment }}",
        "Server(s): ${{ parameters.desc_servers }}",
        "Application: ${{ parameters.desc_application }}",
        "Area(s) Impacted: ${{ parameters.desc_impacted_areas }}",
        "Testing: ${{ parameters.desc_testing }}"
      )

      $description = $descriptionArray -join "`n"

      # Gather justification fields into an array
      $justificationArray = @(
        "Why is the change required? ${{ parameters.justification_reason }}",
        "Who requested the change? ${{ parameters.justification_requester }}",
        "HPO/Corporate Strategic Project: ${{ parameters.justification_project }}",
        "Primary Business Contact: ${{ parameters.justification_contact }}"
      )

      $justification = $justificationArray -join "`n"

      #Write-Host "Description:"
      #Write-Host $description

      #Write-Host "Justification:"
      #Write-Host $justification

      $collectionurl = "https://frb..." # Adjust accordingly
      $organization = ""
      $project = ""
      $repoId = ""
      $token = ""
      $instance = "https://frsdev.servicenowservices.com"
      $username = "YourServiceNowUsername"
      $password = "YourServiceNowPassword"
      $requestedBy = $env:BUILD_REQUESTEDFOR

      # Function to retrieve the latest commit and associated work items
      function Get-CommitAndWorkItemDetails {
          Param(
              [string]$collectionurl,
              [string]$organization,
              [string]$project,
              [string]$repoId,
              [string]$token
          )

          # Base64-encode the PAT for authorization
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$token"))

          # Construct the API URL to get commit details and associated work items
          $baseUrl = "$collectionurl/$organization/$project/_apis/git/repositories/$repoId/commits?searchCriteria.includeWorkItems=true&api-version=7.0-preview.1"

          # Make the API call using the encoded PAT for authorization
          $response = (Invoke-RestMethod -Uri $baseUrl -Method Get -Headers @{Authorization=("Basic $base64AuthInfo")}).value

          # Retrieve the latest commit with associated work items
          $commitWithWorkItems = $response | Where-Object { $_.workItems.Count -gt 0 } | Select-Object -First 1

          if ($commitWithWorkItems) {
              $commitDetails = @{
                  "CommitID" = $commitWithWorkItems.commitId
                  "Author" = $commitWithWorkItems.author.name
                  "Date" = $commitWithWorkItems.author.date
                  "Comment" = $commitWithWorkItems.comment
                  "WorkItems" = @()
               }

               # Retrieve details of associated work items
              foreach ($workItem in $commitWithWorkItems.workItems) {
                  $workItemUrl = $workItem.url + "?api-version=7.0"
                  $workItemDetails = Invoke-RestMethod -Uri $workItemUrl -Method Get -Headers @{Authorization=("Basic $base64AuthInfo")}

                  $commitDetails.WorkItems += @{
                      "WitID" = $workItemDetails.id
                      "rev" = $workItemDetails.rev
                      "Title" = $workItemDetails.fields.'System.Title'
                      "AssignedTo" = $workItemDetails.fields.'System.AssignedTo'.displayName
                      "ChangedDate" = $workItemDetails.fields.'System.ChangedDate'
                      "ChangedBy" = $workItemDetails.fields.'System.ChangedBy'.uniqueName
                      "WorkItemType" = $workItemDetails.fields.'System.WorkItemType'
                      "Priority" = $workItemDetails.fields.'Microsoft.VSTS.Common.Priority'
                      "Description" = ($workItemDetails.fields.'System.Description' -replace '<.*?>','')
                      "IterationPath" = $workItemDetails.fields.'System.IterationPath'
                      "Discussion" = $workItemDetails.fields.'System.History'
                  }

              return $commitDetailsf
          }
          else {
              Write-Host "No commits found with associated work items."
              return $null
          }
      }

      # Function to create a ServiceNow ticket
      function Create-ServiceNowTicket {
          Param(
              [string]$instance,
              [string]$username,
              [string]$password,
              [hashtable]$commitDetails,
              [string]$description,
              [string]$justification
          )

          $change_endpoint = "/api/now/table/change_request"
          $final_endpoint = "$instance$change_endpoint"

          # Convert credentials to a secure string for Basic Auth
          $pair = "{0}:{1}" -f $username, $password
          $encodedCreds = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($pair))

          # Headers
          $headers = @{'Content-Type' = 'application/json'; 'Authorization' = "Basic $encodedCreds"}

          $workItemDescriptions = ($commitDetails.WorkItems | ForEach-Object { "$($_.WitID) - $($_.Title)" }) -join "`n"

          $payloadDescription = ($descriptionArray + $workItemDescriptions) -join "`n"

          # Payload including description and justification
          $payload = @{
              cmdb_ci = "${{ parameters.cmdb_ci }}"
              u_business_justification = "${{ parameters.u_business_justification }}"
              requested_by = "${{ parameters.requested_by }}"
              type = "${{ parameters.type }}"
              impact = "${{ parameters.impact }}"
              state = "${{ parameters.state }}"
              assignment_group = "${{ parameters.assignment_group }}"
              category = "${{ parameters.category }}"
              subcategory = "${{ parameters.subcategory }}"
              short_description = "Commit: $($commitDetails.CommitID) - $($commitDetails.Comment)"
              description = $payloadDescription
              justification = $justification
              implementation_plan = "${{ parameters.implementation_plan }}"
              risk_and_impact_analysis = "${{ parameters.risk_and_impact_analysis }}"
              backout_plan = "${{ parameters.backout_plan }}"
              test_plan = "${{ parameters.test_plan }}"
              communication_plan = "${{ parameters.communication_plan }}"
          } | ConvertTo-Json

          try {
              $response = Invoke-RestMethod -Uri $final_endpoint -Method Post -Headers $headers -Body $payload
              if ($response.result -and $response.result) {
                  $ticketNumber = $response.result.number
                  $sysID = $response.result.sys_id

                  # Display the ticket number and sys_id
                  Write-Host "Ticket created successfully."
                  Write-Host "Ticket Number: $ticketNumber"
                  Write-Host "Sys ID: $sysID"

                  # Set pipeline variables
                  Write-Host "##vso[task.setvariable variable=TicketNumber;]$ticketNumber"
                  Write-Host "##vso[task.setvariable variable=SysID;]$sysID"
              }
          } catch {
              Write-Host "An error occurred while trying to create the ServiceNow ticket."
              if ($_.Exception.Response -ne $null) {
                  $streamReader = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream())
                  $errorResponse = $streamReader.ReadToEnd() | ConvertFrom-Json
                  Write-Host "Error Details: $($errorResponse | ConvertTo-Json -Depth 5)"
                  Write-Host "Status Code: $($_.Exception.Response.StatusCode.value__)"

          }
      }

      # Execute functions
      $commitDetails = Get-CommitAndWorkItemDetails -collectionurl $collectionurl -organization $organization -project $project -repoId $repoId -token $token

      if ($commitDetails) {
          Create-ServiceNowTicket -instance $instance -username $username -password $password -commitDetails $commitDetails -description $description -justification $justification
      } else {
          Write-Host "No valid commit details found. Skipping ticket creation."
      }
